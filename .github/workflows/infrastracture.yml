name: Provision Infrastructure

on:
#  push:
#    branches:
#      - main

jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: eu-central-1
      TF_VAR_s3_bucket: ${{ secrets.TF_VAR_s3_bucket}}
      TF_VAR_account_id: ${{ secrets.TF_VAR_account_id }}
      TF_VAR_region: eu-central-1
      TF_VAR_vpc_cidr_block: ${{ secrets.TF_VAR_vpc_cidr_block }}
      TF_VAR_subnet_cidr_block: ${{ secrets.TF_VAR_subnet_cidr_block }}
      TF_VAR_private_ip: ${{ secrets.TF_VAR_private_ip}}
      TF_VAR_ssh_cidr_block: ${{ secrets.TF_VAR_ssh_cidr_block}}
      TF_VAR_web_access_cidr_blocks: ${{ secrets.TF_VAR_web_access_cidr_blocks}}
      TF_VAR_db_name: ${{ secrets.POSTGRES_DB }}
      TF_VAR_db_username: ${{ secrets.POSTGRES_USER }}
      TF_VAR_redshift_password: ${{ secrets.REDSHIFT_PASSWORD }}
      TF_VAR_redshift_connection_url: ${{ secrets.REDSHIFT_CONNECTION_URL }}
    steps:
      - name: Debug Environment Variables
        run: |
          echo "AWS_ACCESS_KEY_ID is set: $AWS_ACCESS_KEY_ID"
          echo "AWS_SECRET_ACCESS_KEY is set: $AWS_SECRET_ACCESS_KEY"
          echo "AWS_REGION is set: $AWS_REGION"
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Terraform init and apply
        run: |
          cd infrastructure
          terraform init
          terraform apply --auto-approve

      - name: Verify EC2 IP
        run: | 
          cd infrastructure
          terraform output

      - name: Output EC2 Public IP
        id: output_ip
        run: |
          cd infrastructure
          EC2_PUBLIC_IP=$(terraform output -raw server_public_ip)
          echo "EC2 Public IP is $EC2_PUBLIC_IP"
          echo "EC2_PUBLIC_IP=$EC2_PUBLIC_IP" >> $GITHUB_ENV

      - name: Save EC2 Public IP as an artifact
        run: |
          EC2_PUBLIC_IP="${{ env.EC2_PUBLIC_IP }}"  # Use the env variable that was set

          # Check if the file already exists in S3
          if aws s3 ls s3://$TF_VAR_s3_bucket/ec2/ec2_public_ip.txt > /dev/null; then
            echo "EC2 Public IP already exists in S3. Skipping upload."
          else
            # Upload the EC2 Public IP to S3
            echo $EC2_PUBLIC_IP | aws s3 cp - s3://$TF_VAR_s3_bucket/ec2/ec2_public_ip.txt
            echo "EC2 Public IP saved to S3."
          fi

